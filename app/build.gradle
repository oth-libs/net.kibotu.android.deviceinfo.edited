apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: "me.tatarka.retrolambda"
apply plugin: 'android-apt'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        applicationId "net.kibotu.android.deviceinfo"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode commitCount()
        versionName "1.0"
        multiDexEnabled = true
        renderscriptTargetApi 20
        renderscriptSupportModeEnabled true

        buildConfigField "String", "SIMPLE_VERSION_NAME", escape(simpleReleaseVersionName())
        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(canonicalReleaseVersionName())
        buildConfigField "String", "COMMIT_HASH", escape(commitHash())
        buildConfigField "String", "BRANCH", escape(branchNameByGit())
        buildConfigField "String", "BUILD_DATE", escape(new Date().getTime())
    }

//    signingConfigs {
//        try {
//            debug {
//                storeFile file("../debug.jks")
//                storePassword DEBUG_STORE_PASSWORD
//                keyAlias DEBUG_KEYSTORE_ALLIAS
//                keyPassword DEBUG_KEY_PASSWORD
//            }
//        }
//        catch (final ignored) {
//            throw new InvalidUserDataException("You should define DEBUG_KEYSTORE_ALLIAS, DEBUG_STORE_PASSWORD, DEBUG_KEY_PASSWORD in gradle.properties.")
//        }
//        try {
//            release {
//                storeFile file("../release.jks")
//                storePassword RELEASE_STORE_PASSWORD
//                keyAlias RELEASE_KEYSTORE_ALIAS
//                keyPassword RELEASE_KEY_PASSWORD
//            }
//        } catch (final ignored) {
//            throw new InvalidUserDataException("You should define RELEASE_KEYSTORE_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD in gradle.properties.")
//        }
//    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // signingConfig signingConfigs.release
            minifyEnabled = false
            shrinkResources = false
        }
        alpha {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // signingConfig signingConfigs.release
            minifyEnabled = false
            shrinkResources = false
        }
        debug {
            pseudoLocalesEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources = false
        }
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/services/javax.annotation.processing.Processor'  // butterknife
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':lib')

    // frequently used convenient methods
    compile 'com.github.kibotu:common.android.utils:0.7.1'

    // presenter
    compile 'com.github.kibotu:RecyclerViewPresenter:1.4.1'

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:cardview-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'

    // view binding
    apt 'com.jakewharton:butterknife-compiler:8.2.1'

    // recyclerview animations
    compile 'jp.wasabeef:recyclerview-animators:2.2.3'

    // recyclerview overscroll effect
    compile 'me.everything:overscroll-decor-android:1.0.3'

    // fonts
    compile('uk.co.chrisjenx:calligraphy:2.2.0')

    // crouton notifications
    compile('de.keyboardsurfer.android.widget:crouton:1.8.5@aar') {
        exclude group: 'com.google.android', module: 'support-v4'
    }

    // chart
    compile 'com.github.jjoe64:GraphView:v4.0.1'

    // fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true;
    }

    // auto resizing text views
    compile 'me.grantland:autofittextview:0.2.1'

    // fancy time calculations
    compile 'joda-time:joda-time:2.9.4'

    // recyclerview fast scrolling
    compile 'com.github.kibotu:RecyclerView-FastScroll:1.0.8'

    // permissions
    compile 'com.github.hotchemi:permissionsdispatcher:2.1.3'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:2.1.3'

    // detecting memory leaks
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    alphaCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    // debug menu
    compile('com.mikepenz:materialdrawer:5.2.6@aar') {
        transitive = true
    }

    // debugging
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
    compile 'com.facebook.stetho:stetho-js-rhino:1.3.1'

    // force update
    compile 'com.github.kibotu:GooglePlayForceUpdate:1.0.8'
}

retrolambda {
    jvmArgs '-noverify'
}

project.android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        variant.buildConfigField "boolean", "ALPHA", variant.getName() == "alpha" ? "true" : "false"
        variant.buildConfigField "boolean", "RELEASE", variant.getName() == "release" ? "true" : "false"
    }
}

// https://github.com/android/platform_packages_apps_settings/blob/master/AndroidManifest.xml
//noinspection GroovyAssignabilityCheck
task settings() << {
    description = "adb shell am start -a android.settings.SETTINGS"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        executable android.getAdbExe().toString()
        args = ['shell', 'am', 'start', '-a', 'android.settings.SETTINGS']
        standardOutput = stdout;
    }
    final def result = stdout.toString().trim();

    println(result)
}

//noinspection GroovyAssignabilityCheck
task devSettings() << {
    description = "adb shell am start -n com.android.settings/.DevelopmentSettings"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        executable android.getAdbExe().toString()
        args = ['shell', 'am', 'start', '-n', 'com.android.settings/.DevelopmentSettings']
        standardOutput = stdout;
    }
    final def result = stdout.toString().trim();
    println(result)
}

//noinspection GroovyAssignabilityCheck
task printCommitCount() << {
    commitCount()
}

//noinspection GroovyAssignabilityCheck
task printBranchname() << {
    branchName()
}

def commitHash() {
    description = "git log -n 1 --format='%h'"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', "--format='%h'"
        standardOutput = stdout
    }
    println("Git Hash" + stdout.toString())
    return stdout.toString().trim().replaceAll('\'', '')
}

def commitCount() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-list --full-history --all"
    println(description)
    exec {
        commandLine 'git', 'rev-list', '--full-history', '--all'
        standardOutput = stdout
    }
    final String output = stdout.toString();
    final List<String> commits = output.split("\n");
    println("Version Code: " + commits.size())
    return commits.size();
}

def simpleReleaseVersionName() {
    description = "Creating release version name. Format: major.minor.build"
    println(description)

    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()
    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (releaseName.contains("release"))
        releaseName = releaseName.replace("release/", "");

    if (buildNumber != null)
        releaseName += "." + buildNumber
    else
        releaseName += "." + 0

    println("Version Name: " + releaseName)
    return releaseName
}

def canonicalReleaseVersionName() {
    description = "Creating release version name. Format: branch/major.minor.build-commithash"
    println(description)
    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()

    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (!releaseName.contains("release"))
        releaseName += "/0.0"

    if (buildNumber != null) {
        releaseName += "." + buildNumber + "-"
    } else {
        releaseName += ".0-"
    }

    releaseName += commitHash()
    println("Version Name: " + releaseName)
    return releaseName
}

def buildNumberByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_BUILD_NUMBER != null)
        return Integer.parseInt(env.BITRISE_BUILD_NUMBER)
    if (env.BUILD_NUMBER != null)
        return Integer.parseInt(env.BUILD_NUMBER)
    if (env.TRAVIS_BUILD_NUMBER != null)
        return Integer.parseInt(env.TRAVIS_BUILD_NUMBER)
    return 0;
}

def branchName() {
    description = "Getting branch name from Jenkins or Travis or from git directly."
    println(description)
    def branchName = branchNameByCI()
    if (branchName == null)
        branchName = branchNameByGit()
    return branchName;
}

def branchNameByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_GIT_BRANCH != null)
        return env.BITRISE_GIT_BRANCH;
    if (env.GIT_BRANCH != null)
        return env.GIT_BRANCH
    if (env.TRAVIS_BRANCH != null)
        return env.TRAVIS_BRANCH
    return null
}

def branchNameByGit() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-parse --abbrev-ref HEAD"
    println(description)
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    final String output = stdout.toString().trim();
    println("Branch Name: " + output)
    return output;
}

def escape(Object value) {
    return "\"" + value + "\""
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { final dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = ['--multi-dex']
        } else {
            dx.additionalParameters += '--multi-dex'
        }
    }
}